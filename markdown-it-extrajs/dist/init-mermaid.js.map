{
  "version": 3,
  "sources": ["../src/init-mermaid.ts"],
  "sourcesContent": ["import type { IconifyJSON } from \"@iconify/types\";\nimport { dedent } from \"ts-dedent\";\nimport { nanoid } from \"nanoid\";\nimport type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.js\";\nimport { createIconLoader, getIcons } from \"./iconify-json.js\";\n\nexport const initMermaid: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const entityDecode = function (html: string): string {\n    const decoder = document.createElement(\"div\");\n    html = encodeURIComponent(html).replace(/%26/g, \"&\").replace(/%23/g, \"#\")\n      .replace(/%3B/g, \";\");\n    decoder.innerHTML = html;\n    return decodeURIComponent(decoder.textContent!);\n  };\n\n  if (options.mermaidUrl) {\n    const { default: mermaid } = await import(options.mermaidUrl);\n\n    if (options.mermaidElkUrl) {\n      const { default: elkLayouts } = await import(options.mermaidElkUrl);\n      mermaid.registerLayoutLoaders(elkLayouts);\n    }\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN, options.iconifyJsonCDNParams);\n    const icons = await getIcons(options.unoCSSUrl);\n    const createMermaidIconLoaders = () => {\n      const loaders: { name: string; loader: () => Promise<IconifyJSON> }[] =\n        [];\n      icons.forEach((key: string) => {\n        loaders.push(\n          {\n            name: key,\n            loader: iconLoader(key),\n          },\n        );\n      });\n      return loaders;\n    };\n    mermaid.registerIconPacks(createMermaidIconLoaders());\n\n    mermaid.initialize({\n      ...(frontMatter.mermaidConfig ?? {}),\n      ...{ startOnLoad: false, suppressErrorRendering: true },\n    });\n\n    const renders = Array.from(document.querySelectorAll(\".mermaid\")).map(\n      async (element) => {\n        if (element.getAttribute(\"data-processed\")) {\n          return;\n        }\n        element.setAttribute(\"data-processed\", \"true\");\n        const firstChild = element.firstChild;\n        if (firstChild &&\n          firstChild.nodeType !== Node.TEXT_NODE &&\n          firstChild.nodeType !== Node.CDATA_SECTION_NODE) {\n          return;\n        }\n        const graphDefinition = element.innerHTML;\n\n        element.querySelectorAll(\"svg\").forEach((svg) => svg.remove());\n        if (graphDefinition) {\n          const id = `mermaid-${nanoid()}`;\n          const renderResult = await mermaid.render(\n            id,\n            dedent(entityDecode(graphDefinition))\n              .trim()\n              .replace(/<br\\s*\\/?>/gi, \"<br/>\"),\n          );\n          element.innerHTML = renderResult.svg;\n          renderResult.bindFunctions?.(element);\n        }\n      },\n    );\n\n    const safeRenders = renders.map((p) => p.catch((e) => console.error(e)));\n    await Promise.all(safeRenders);\n  }\n};\n"],
  "mappings": "AACA,SAAS,cAAc;AACvB,SAAS,cAAc;AAMvB,SAAS,kBAAkB,gBAAgB;AAEpC,MAAM,cAAgC,OAC3C,UAA0B,CAAC,GAC3B,cAAkC,CAAC,MAChC;AACH,QAAM,eAAe,SAAU,MAAsB;AACnD,UAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,WAAO,mBAAmB,IAAI,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EACrE,QAAQ,QAAQ,GAAG;AACtB,YAAQ,YAAY;AACpB,WAAO,mBAAmB,QAAQ,WAAY;AAAA,EAChD;AAEA,MAAI,QAAQ,YAAY;AACtB,UAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,OAAO,QAAQ;AAElD,QAAI,QAAQ,eAAe;AACzB,YAAM,EAAE,SAAS,WAAW,IAAI,MAAM,OAAO,QAAQ;AACrD,cAAQ,sBAAsB,UAAU;AAAA,IAC1C;AAEA,UAAM,aAAa,iBAAiB,QAAQ,gBAAgB,QAAQ,oBAAoB;AACxF,UAAM,QAAQ,MAAM,SAAS,QAAQ,SAAS;AAC9C,UAAM,2BAA2B,MAAM;AACrC,YAAM,UACJ,CAAC;AACH,YAAM,QAAQ,CAAC,QAAgB;AAC7B,gBAAQ;AAAA,UACN;AAAA,YACE,MAAM;AAAA,YACN,QAAQ,WAAW,GAAG;AAAA,UACxB;AAAA,QACF;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT;AACA,YAAQ,kBAAkB,yBAAyB,CAAC;AAEpD,YAAQ,WAAW;AAAA,MACjB,GAAI,YAAY,iBAAiB,CAAC;AAAA,MAClC,GAAG,EAAE,aAAa,OAAO,wBAAwB,KAAK;AAAA,IACxD,CAAC;AAED,UAAM,UAAU,MAAM,KAAK,SAAS,iBAAiB,UAAU,CAAC,EAAE;AAAA,MAChE,OAAO,YAAY;AACjB,YAAI,QAAQ,aAAa,gBAAgB,GAAG;AAC1C;AAAA,QACF;AACA,gBAAQ,aAAa,kBAAkB,MAAM;AAC7C,cAAM,aAAa,QAAQ;AAC3B,YAAI,cACF,WAAW,aAAa,KAAK,aAC7B,WAAW,aAAa,KAAK,oBAAoB;AACjD;AAAA,QACF;AACA,cAAM,kBAAkB,QAAQ;AAEhC,gBAAQ,iBAAiB,KAAK,EAAE,QAAQ,CAAC,QAAQ,IAAI,OAAO,CAAC;AAC7D,YAAI,iBAAiB;AACnB,gBAAM,KAAK,WAAW,OAAO,CAAC;AAC9B,gBAAM,eAAe,MAAM,QAAQ;AAAA,YACjC;AAAA,YACA,OAAO,aAAa,eAAe,CAAC,EACjC,KAAK,EACL,QAAQ,gBAAgB,OAAO;AAAA,UACpC;AACA,kBAAQ,YAAY,aAAa;AACjC,uBAAa,gBAAgB,OAAO;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAEA,UAAM,cAAc,QAAQ,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC,CAAC;AACvE,UAAM,QAAQ,IAAI,WAAW;AAAA,EAC/B;AACF;",
  "names": []
}
