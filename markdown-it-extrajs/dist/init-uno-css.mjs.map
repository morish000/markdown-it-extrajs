{
  "version": 3,
  "sources": ["../src/types.ts", "../src/iconify-json.ts", "../src/init-uno-css.ts"],
  "sourcesContent": ["import type { Rule } from \"@unocss\";\nimport type { IconsOptions } from \"@unocss/preset-icons\";\nimport type { PresetWindOptions } from \"@unocss/preset-wind\";\nimport type { PresetMiniOptions } from \"@unocss/preset-mini\";\nimport type { AttributifyOptions } from \"@unocss/preset-attributify\";\nimport type { TypographyOptions } from \"@unocss/preset-typography\";\nimport type { WebFontsOptions } from \"@unocss/preset-web-fonts\";\nimport type { TagifyOptions } from \"@unocss/preset-tagify\";\nimport type { MermaidConfig } from \"mermaid\";\nimport type { Config } from \"@fortawesome/fontawesome-svg-core\";\n\nexport type UnoCSSConfig<Theme extends object = object> = {\n  rules?: Rule<Theme>[];\n  presetWind?: PresetWindOptions | null;\n  presetMini?: PresetMiniOptions | null;\n  presetIcons?: IconsOptions | null;\n  presetAttributify?: AttributifyOptions | null;\n  presetTypography?: TypographyOptions | null;\n  presetWebFonts?: WebFontsOptions | null;\n  presetTagify?: TagifyOptions | null;\n  presetRemToPx?: boolean;\n};\n\nexport type MermaidJSConfig = {\n  mermaidConfig?: MermaidConfig;\n};\n\nexport type FontAwesomeConfig = {\n  fontAwesomeConfig?: Config;\n};\n\nexport type ExtraJSUseOptions = {\n  useMermaid?: boolean;\n  useFontAwesome?: boolean;\n  useUnoCSS?: boolean;\n};\n\nexport type ExtraJSFrontMatter =\n  & UnoCSSConfig\n  & MermaidJSConfig\n  & FontAwesomeConfig\n  & ExtraJSUseOptions;\n\nexport type ExtraJSOptions = ExtraJSUseOptions & {\n  discardFrontMatter?: boolean;\n  outputScriptTag?: boolean;\n  mermaidUrl?: string;\n  mermaidElkUrl?: string;\n  fontAwesomeUrl?: string;\n  unoCSSUrl?: string;\n  iconifyJsonCDN?: string;\n};\n\nexport const defaultOptions: {\n  [K in keyof ExtraJSOptions]-?: ExtraJSOptions[K];\n} = {\n  discardFrontMatter: true,\n  outputScriptTag: true,\n  useMermaid: false,\n  useFontAwesome: false,\n  useUnoCSS: false,\n  mermaidUrl: \"https://esm.sh/mermaid\",\n  mermaidElkUrl: \"https://esm.sh/@mermaid-js/layout-elk\",\n  fontAwesomeUrl: \"https://esm.sh/@fortawesome\",\n  unoCSSUrl: \"https://esm.sh/@unocss\",\n  iconifyJsonCDN: \"https://esm.sh\",\n};\n", "import { defaultOptions } from \"./types.ts\";\n\nexport const getIcons = async (\n  unoCSSUrl: string = defaultOptions.unoCSSUrl,\n) =>\n  await import(`${unoCSSUrl}/preset-icons/core`).then((i) =>\n    i.icons as string[]\n  );\n\nexport const createIconLoader =\n  (iconifyJsonCDN: string = defaultOptions.iconifyJsonCDN) =>\n  (key: string) =>\n  () => import(`${iconifyJsonCDN}/@iconify-json/${key}`).then((i) => i.icons);\n", "import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\nimport { createIconLoader, getIcons } from \"./iconify-json.ts\";\nimport type { IconifyJSON } from \"@iconify/types\";\n\nexport default async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const [\n    { default: initUnocssRuntime },\n    { default: initPresetWind },\n    { default: initPresetMini },\n    { default: initPresetUno },\n    { default: initPresetIcons },\n    { default: initPresetAttributify },\n    { default: initPresetTypography },\n    { default: initPresetWebFonts },\n    { default: initPresetTagify },\n    { default: initPresetRemToPx },\n  ] = await Promise.all([\n    import(options.unoCSSUrl + \"/runtime\"),\n    frontMatter.presetWind\n      ? import(options.unoCSSUrl + \"/preset-wind\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-mini\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && !frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-uno\")\n      : Promise.resolve({}),\n    frontMatter.presetIcons\n      ? import(options.unoCSSUrl + \"/preset-icons/browser\")\n      : Promise.resolve({}),\n    frontMatter.presetAttributify\n      ? import(options.unoCSSUrl + \"/preset-attributify\")\n      : Promise.resolve({}),\n    frontMatter.presetTypography\n      ? import(options.unoCSSUrl + \"/preset-typography\")\n      : Promise.resolve({}),\n    frontMatter.presetWebFonts\n      ? import(options.unoCSSUrl + \"/preset-web-fonts\")\n      : Promise.resolve({}),\n    frontMatter.presetTagify\n      ? import(options.unoCSSUrl + \"/preset-tagify\")\n      : Promise.resolve({}),\n    frontMatter.presetRemToPx\n      ? import(options.unoCSSUrl + \"/preset-rem-to-px\")\n      : Promise.resolve({}),\n  ]);\n\n  const presets = [];\n\n  if (frontMatter.presetWind) {\n    presets.push(initPresetWind(frontMatter.presetWind));\n  } else if (frontMatter.presetMini) {\n    presets.push(initPresetMini(frontMatter.presetMini));\n  } else {\n    presets.push(initPresetUno());\n  }\n\n  if (frontMatter.presetIcons) {\n    const presetIcons = { ...frontMatter.presetIcons };\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN);\n    const icons = await getIcons(options.unoCSSUrl);\n\n    const iconCollections: () => Record<string, () => Promise<IconifyJSON>> =\n      () => {\n        const collections: Record<string, () => Promise<IconifyJSON>> = {};\n        icons.forEach((key: string) => {\n          collections[key] = iconLoader(key);\n        });\n\n        return collections;\n      };\n\n    presetIcons.autoInstall = false;\n    presetIcons.collections = {\n      ...iconCollections(),\n    };\n    presets.push(initPresetIcons(presetIcons));\n  }\n\n  if (frontMatter.presetAttributify) {\n    presets.push(initPresetAttributify(frontMatter.presetAttributify));\n  }\n\n  if (frontMatter.presetTypography) {\n    presets.push(initPresetTypography(frontMatter.presetTypography));\n  }\n\n  if (frontMatter.presetWebFonts) {\n    presets.push(initPresetWebFonts(frontMatter.presetWebFonts));\n  }\n\n  if (frontMatter.presetTagify) {\n    presets.push(initPresetTagify(frontMatter.presetTagify));\n  }\n\n  if (frontMatter.presetRemToPx) {\n    presets.push(initPresetRemToPx());\n  }\n\n  const rules = frontMatter.rules ?? [];\n\n  initUnocssRuntime({\n    defaults: {\n      rules,\n      presets,\n    },\n  });\n};\n"],
  "mappings": "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",
  "names": ["defaultOptions", "getIcons", "unoCSSUrl", "defaultOptions", "i", "createIconLoader", "iconifyJsonCDN", "key", "init_uno_css_default", "options", "frontMatter", "initUnocssRuntime", "initPresetWind", "initPresetMini", "initPresetUno", "initPresetIcons", "initPresetAttributify", "initPresetTypography", "initPresetWebFonts", "initPresetTagify", "initPresetRemToPx", "presets", "presetIcons", "iconLoader", "createIconLoader", "icons", "getIcons", "iconCollections", "collections", "key", "rules"]
}
