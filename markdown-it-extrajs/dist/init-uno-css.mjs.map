{
  "version": 3,
  "sources": ["../src/init-uno-css.ts"],
  "sourcesContent": ["import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport default async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n  _conf: ExtraJSFrontMatter = {},\n) => {\n  const conf: ExtraJSFrontMatter = {\n    ...frontMatter,\n  };\n  if (conf.presetIcons) {\n    conf.presetIcons.cdn = options.unoCSSPresetIconCDN;\n  }\n\n  const [\n    { default: initUnocssRuntime },\n    { default: initPresetIcons },\n    { default: initPresetUno },\n    { default: initPresetWind },\n    { default: initPresetMini },\n    { default: initPresetAttributify },\n    { default: initPresetTypography },\n    { default: initPresetWebFonts },\n    { default: initPresetTagify },\n    { default: initPresetRemToPx },\n  ] = await Promise.all([\n    import(options.unoCSSUrl + \"/runtime\"),\n    import(options.unoCSSUrl + \"/preset-icons/browser\"),\n    import(options.unoCSSUrl + \"/preset-uno\"),\n    import(options.unoCSSUrl + \"/preset-wind\"),\n    import(options.unoCSSUrl + \"/preset-mini\"),\n    import(options.unoCSSUrl + \"/preset-attributify\"),\n    import(options.unoCSSUrl + \"/preset-typography\"),\n    import(options.unoCSSUrl + \"/preset-web-fonts\"),\n    import(options.unoCSSUrl + \"/preset-tagify\"),\n    import(options.unoCSSUrl + \"/preset-rem-to-px\"),\n  ]);\n\n  const presets = [];\n\n  if (conf.presetWind) {\n    presets.push(initPresetWind(conf.presetWind));\n  } else if (conf.presetMini) {\n    presets.push(initPresetMini(conf.presetMini));\n  } else {\n    presets.push(initPresetUno());\n  }\n\n  if (conf.presetIcons) {\n    const presetIcons = { ...conf.presetIcons };\n    if (_conf?.presetIcons?.collections && options.useBundleIconifyJson) {\n      presetIcons.autoInstall = false;\n      presetIcons.collections = _conf.presetIcons.collections;\n    }\n    presets.push(initPresetIcons(presetIcons));\n  }\n\n  if (conf.presetAttributify) {\n    presets.push(initPresetAttributify(conf.presetAttributify));\n  }\n\n  if (conf.presetTypography) {\n    presets.push(initPresetTypography(conf.presetTypography));\n  }\n\n  if (conf.presetWebFonts) {\n    presets.push(initPresetWebFonts(conf.presetWebFonts));\n  }\n\n  if (conf.presetTagify) {\n    presets.push(initPresetTagify(conf.presetTagify));\n  }\n\n  if (conf.presetRemToPx) {\n    presets.push(initPresetRemToPx());\n  }\n\n  const rules = conf.rules ?? [];\n\n  initUnocssRuntime({\n    defaults: {\n      rules,\n      presets,\n    },\n  });\n};\n"],
  "mappings": "AAEA,IAAOA,EAAQ,MACbC,EAA0B,CAAC,EAC3BC,EAAkC,CAAC,EACnCC,EAA4B,CAAC,IAC1B,CACH,IAAMC,EAA2B,CAC/B,GAAGF,CACL,EACIE,EAAK,cACPA,EAAK,YAAY,IAAMH,EAAQ,qBAGjC,GAAM,CACJ,CAAE,QAASI,CAAkB,EAC7B,CAAE,QAASC,CAAgB,EAC3B,CAAE,QAASC,CAAc,EACzB,CAAE,QAASC,CAAe,EAC1B,CAAE,QAASC,CAAe,EAC1B,CAAE,QAASC,CAAsB,EACjC,CAAE,QAASC,CAAqB,EAChC,CAAE,QAASC,CAAmB,EAC9B,CAAE,QAASC,CAAiB,EAC5B,CAAE,QAASC,CAAkB,CAC/B,EAAI,MAAM,QAAQ,IAAI,CACpB,OAAOb,EAAQ,UAAY,YAC3B,OAAOA,EAAQ,UAAY,yBAC3B,OAAOA,EAAQ,UAAY,eAC3B,OAAOA,EAAQ,UAAY,gBAC3B,OAAOA,EAAQ,UAAY,gBAC3B,OAAOA,EAAQ,UAAY,uBAC3B,OAAOA,EAAQ,UAAY,sBAC3B,OAAOA,EAAQ,UAAY,qBAC3B,OAAOA,EAAQ,UAAY,kBAC3B,OAAOA,EAAQ,UAAY,oBAC7B,CAAC,EAEKc,EAAU,CAAC,EAUjB,GARIX,EAAK,WACPW,EAAQ,KAAKP,EAAeJ,EAAK,UAAU,CAAC,EACnCA,EAAK,WACdW,EAAQ,KAAKN,EAAeL,EAAK,UAAU,CAAC,EAE5CW,EAAQ,KAAKR,EAAc,CAAC,EAG1BH,EAAK,YAAa,CACpB,IAAMY,EAAc,CAAE,GAAGZ,EAAK,WAAY,EACtCD,GAAO,aAAa,aAAeF,EAAQ,uBAC7Ce,EAAY,YAAc,GAC1BA,EAAY,YAAcb,EAAM,YAAY,aAE9CY,EAAQ,KAAKT,EAAgBU,CAAW,CAAC,CAC3C,CAEIZ,EAAK,mBACPW,EAAQ,KAAKL,EAAsBN,EAAK,iBAAiB,CAAC,EAGxDA,EAAK,kBACPW,EAAQ,KAAKJ,EAAqBP,EAAK,gBAAgB,CAAC,EAGtDA,EAAK,gBACPW,EAAQ,KAAKH,EAAmBR,EAAK,cAAc,CAAC,EAGlDA,EAAK,cACPW,EAAQ,KAAKF,EAAiBT,EAAK,YAAY,CAAC,EAG9CA,EAAK,eACPW,EAAQ,KAAKD,EAAkB,CAAC,EAGlC,IAAMG,EAAQb,EAAK,OAAS,CAAC,EAE7BC,EAAkB,CAChB,SAAU,CACR,MAAAY,EACA,QAAAF,CACF,CACF,CAAC,CACH",
  "names": ["init_uno_css_default", "options", "frontMatter", "_conf", "conf", "initUnocssRuntime", "initPresetIcons", "initPresetUno", "initPresetWind", "initPresetMini", "initPresetAttributify", "initPresetTypography", "initPresetWebFonts", "initPresetTagify", "initPresetRemToPx", "presets", "presetIcons", "rules"]
}
