{
  "version": 3,
  "sources": ["../src/types.ts", "../src/iconify-json.ts", "../node_modules/.deno/ts-dedent@2.2.0/node_modules/ts-dedent/src/index.ts", "../node_modules/.deno/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js", "../node_modules/.deno/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js", "../node_modules/.deno/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js", "../node_modules/.deno/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js", "../src/init-mermaid.ts", "../src/init-font-awesome.ts", "../src/init-uno-css.ts", "../src/init-all.ts"],
  "sourcesContent": ["import type { Rule } from \"@unocss/core\";\nimport type { IconsOptions } from \"@unocss/preset-icons\";\nimport type { PresetWindOptions } from \"@unocss/preset-wind\";\nimport type { PresetMiniOptions } from \"@unocss/preset-mini\";\nimport type { AttributifyOptions } from \"@unocss/preset-attributify\";\nimport type { TypographyOptions } from \"@unocss/preset-typography\";\nimport type { WebFontsOptions } from \"@unocss/preset-web-fonts\";\nimport type { TagifyOptions } from \"@unocss/preset-tagify\";\nimport type { MermaidConfig } from \"mermaid\";\nimport type { Config } from \"@fortawesome/fontawesome-svg-core\";\n\nexport type UnoCSSConfig<Theme extends object = object> = {\n  rules?: Rule<Theme>[];\n  presetWind?: PresetWindOptions | null;\n  presetMini?: PresetMiniOptions | null;\n  presetIcons?: IconsOptions | null;\n  presetAttributify?: AttributifyOptions | null;\n  presetTypography?: TypographyOptions | null;\n  presetWebFonts?: WebFontsOptions | null;\n  presetTagify?: TagifyOptions | null;\n  presetRemToPx?: boolean;\n};\n\nexport type MermaidJSConfig = {\n  mermaidConfig?: MermaidConfig;\n};\n\nexport type FontAwesomeConfig = {\n  fontAwesomeConfig?: Config;\n};\n\nexport type ExtraJSUseOptions = {\n  useMermaid?: boolean;\n  useFontAwesome?: boolean;\n  useUnoCSS?: boolean;\n};\n\nexport type ExtraJSFrontMatter =\n  & UnoCSSConfig\n  & MermaidJSConfig\n  & FontAwesomeConfig\n  & ExtraJSUseOptions;\n\nexport type ExtraJSOptions = ExtraJSUseOptions & {\n  discardFrontMatter?: boolean;\n  outputScriptTag?: boolean;\n  mermaidUrl?: string;\n  mermaidElkUrl?: string;\n  fontAwesomeUrl?: string;\n  unoCSSUrl?: string;\n  iconifyJsonCDN?: string;\n};\n\nexport type InitFunctionType = (\n  options: ExtraJSOptions,\n  frontMatter: ExtraJSFrontMatter,\n) => Promise<void>;\n\nexport const defaultOptions: {\n  [K in keyof ExtraJSOptions]-?: ExtraJSOptions[K];\n} = {\n  discardFrontMatter: true,\n  outputScriptTag: true,\n  useMermaid: false,\n  useFontAwesome: false,\n  useUnoCSS: false,\n  mermaidUrl: \"https://esm.sh/mermaid\",\n  mermaidElkUrl: \"https://esm.sh/@mermaid-js/layout-elk\",\n  fontAwesomeUrl: \"https://esm.sh/@fortawesome\",\n  unoCSSUrl: \"https://esm.sh/@unocss\",\n  iconifyJsonCDN: \"https://esm.sh\",\n};\n", "import { defaultOptions } from \"./types.ts\";\n\nexport const getIcons = async (\n  unoCSSUrl: string = defaultOptions.unoCSSUrl,\n) =>\n  await import(`${unoCSSUrl}/preset-icons/core`).then((i) =>\n    i.icons as string[]\n  );\n\nexport const createIconLoader =\n  (iconifyJsonCDN: string = defaultOptions.iconifyJsonCDN) =>\n  (key: string) =>\n  () => import(`${iconifyJsonCDN}/@iconify-json/${key}`).then((i) => i.icons);\n", "export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.ts\";\nimport type { IconifyJSON } from \"@iconify/types\";\nimport { createIconLoader, getIcons } from \"./iconify-json.ts\";\nimport { dedent } from \"ts-dedent\";\n// @deno-types=\"@types/uuid\"\nimport { v4 } from \"uuid\";\n\nexport const initMermaid: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const entityDecode = function (html: string): string {\n    const decoder = document.createElement(\"div\");\n    html = encodeURIComponent(html).replace(/%26/g, \"&\").replace(/%23/g, \"#\")\n      .replace(/%3B/g, \";\");\n    decoder.innerHTML = html;\n    return decodeURIComponent(decoder.textContent!);\n  };\n\n  if (options.mermaidUrl) {\n    const { default: mermaid } = await import(options.mermaidUrl);\n\n    if (options.mermaidElkUrl) {\n      const { default: elkLayouts } = await import(options.mermaidElkUrl);\n      mermaid.registerLayoutLoaders(elkLayouts);\n    }\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN);\n    const icons = await getIcons(options.unoCSSUrl);\n    const createMermaidIconLoaders = () => {\n      const loaders: { name: string; loader: () => Promise<IconifyJSON> }[] =\n        [];\n      icons.forEach((key: string) => {\n        loaders.push(\n          {\n            name: key,\n            loader: iconLoader(key),\n          },\n        );\n      });\n      return loaders;\n    };\n    mermaid.registerIconPacks(createMermaidIconLoaders());\n\n    mermaid.initialize({\n      ...(frontMatter.mermaidConfig ?? {}),\n      ...{ startOnLoad: false, suppressErrorRendering: true },\n    });\n\n    const renders = Array.from(document.querySelectorAll(\".mermaid\")).map(\n      async (element) => {\n        if (element.getAttribute(\"data-processed\")) {\n          return;\n        }\n        element.setAttribute(\"data-processed\", \"true\");\n        const graphDefinition = element.innerHTML;\n\n        element.querySelectorAll(\"svg\").forEach((svg) => svg.remove());\n        if (graphDefinition) {\n          const id = `mermaid-${v4()}`;\n          const renderResult = await mermaid.render(\n            id,\n            dedent(entityDecode(graphDefinition))\n              .trim()\n              .replace(/<br\\s*\\/?>/gi, \"<br/>\"),\n          );\n          element.innerHTML = renderResult.svg;\n          renderResult.bindFunctions?.(element);\n        }\n      },\n    );\n\n    const safeRenders = renders.map((p) => p.catch((e) => console.error(e)));\n    await Promise.all(safeRenders);\n  }\n};\n", "import type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.ts\";\nimport type {\n  Config,\n  IconDefinition,\n  IconPack,\n} from \"@fortawesome/fontawesome-svg-core\";\n\nexport const initFontAwesome: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  try {\n    const [\n      fontawesomeSvgCore,\n      freeSolidSvgIcons,\n      freeRegularSvgIcons,\n      freeBrandsSvgIcons,\n    ] = await Promise.all([\n      import(options.fontAwesomeUrl + \"/fontawesome-svg-core\"),\n      import(options.fontAwesomeUrl + \"/free-solid-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-regular-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-brands-svg-icons\"),\n    ]);\n\n    const extractIcons = (\n      iconSet: Record<string, IconPack | IconDefinition | string>,\n    ) => {\n      return Object.entries(iconSet)\n        .filter(([key, value]) =>\n          key !== \"prefix\" && key !== \"default\" && typeof value !== \"string\"\n        )\n        .map(([, value]) => value);\n    };\n\n    const icons = [\n      ...extractIcons(freeSolidSvgIcons),\n      ...extractIcons(freeRegularSvgIcons),\n      ...extractIcons(freeBrandsSvgIcons),\n    ];\n\n    ([\n      \"familyPrefix\",\n      \"cssPrefix\",\n      \"styleDefault\",\n      \"familyDefault\",\n      \"replacementClass\",\n      \"autoReplaceSvg\",\n      \"autoA11y\",\n      \"searchPseudoElements\",\n      \"keepOriginalSource\",\n      \"measurePerformance\",\n      \"mutateApproach\",\n      \"showMissingIcons\",\n    ] as (keyof Config)[]).forEach((key) =>\n      frontMatter.fontAwesomeConfig?.[key] &&\n      (fontawesomeSvgCore.config[key] = frontMatter.fontAwesomeConfig[key])\n    );\n\n    fontawesomeSvgCore.config.observeMutations = false;\n    fontawesomeSvgCore.config.autoAddCss = false;\n    fontawesomeSvgCore.library.add(...icons);\n    fontawesomeSvgCore.dom.i2svg();\n\n    if (!document.getElementById(\"extrajs-fontawesome\")) {\n      const styleElement = document.createElement(\"style\");\n      styleElement.id = \"extrajs-fontawesome\";\n      styleElement.textContent = fontawesomeSvgCore.dom.css();\n      document.head.appendChild(styleElement);\n      const observer = new MutationObserver(() => {\n        if (styleElement && styleElement.textContent === \"\") {\n          styleElement.textContent = fontawesomeSvgCore.dom.css();\n        }\n      });\n      observer.observe(styleElement, {\n        characterData: true,\n        childList: true,\n        subtree: true,\n      });\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n", "import type { IconifyJSON } from \"@iconify/types\";\nimport type { PresetOrFactory } from \"@unocss/core\";\nimport type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.ts\";\nimport { createIconLoader, getIcons } from \"./iconify-json.ts\";\n\nexport const initUnoCSS: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const [\n    { default: initUnocssRuntime },\n    { default: initPresetWind },\n    { default: initPresetMini },\n    { default: initPresetUno },\n    { default: initPresetIcons },\n    { default: initPresetAttributify },\n    { default: initPresetTypography },\n    { default: initPresetWebFonts },\n    { default: initPresetTagify },\n    { default: initPresetRemToPx },\n  ] = await Promise.all([\n    import(options.unoCSSUrl + \"/runtime\"),\n    frontMatter.presetWind\n      ? import(options.unoCSSUrl + \"/preset-wind\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-mini\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && !frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-uno\")\n      : Promise.resolve({}),\n    frontMatter.presetIcons\n      ? import(options.unoCSSUrl + \"/preset-icons/browser\")\n      : Promise.resolve({}),\n    frontMatter.presetAttributify\n      ? import(options.unoCSSUrl + \"/preset-attributify\")\n      : Promise.resolve({}),\n    frontMatter.presetTypography\n      ? import(options.unoCSSUrl + \"/preset-typography\")\n      : Promise.resolve({}),\n    frontMatter.presetWebFonts\n      ? import(options.unoCSSUrl + \"/preset-web-fonts\")\n      : Promise.resolve({}),\n    frontMatter.presetTagify\n      ? import(options.unoCSSUrl + \"/preset-tagify\")\n      : Promise.resolve({}),\n    frontMatter.presetRemToPx\n      ? import(options.unoCSSUrl + \"/preset-rem-to-px\")\n      : Promise.resolve({}),\n  ]);\n\n  const presets: PresetOrFactory[] = [];\n\n  if (frontMatter.presetWind) {\n    presets.push(initPresetWind(frontMatter.presetWind));\n  } else if (frontMatter.presetMini) {\n    presets.push(initPresetMini(frontMatter.presetMini));\n  } else {\n    presets.push(initPresetUno());\n  }\n\n  if (frontMatter.presetIcons) {\n    const presetIcons = { ...frontMatter.presetIcons };\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN);\n    const icons = await getIcons(options.unoCSSUrl);\n\n    const iconCollections: () => Record<string, () => Promise<IconifyJSON>> =\n      () => {\n        const collections: Record<string, () => Promise<IconifyJSON>> = {};\n        icons.forEach((key: string) => {\n          collections[key] = iconLoader(key);\n        });\n\n        return collections;\n      };\n\n    presetIcons.autoInstall = false;\n    presetIcons.collections = {\n      ...iconCollections(),\n    };\n    presets.push(initPresetIcons(presetIcons));\n  }\n\n  if (frontMatter.presetAttributify) {\n    presets.push(initPresetAttributify(frontMatter.presetAttributify));\n  }\n\n  if (frontMatter.presetTypography) {\n    presets.push(initPresetTypography(frontMatter.presetTypography));\n  }\n\n  if (frontMatter.presetWebFonts) {\n    presets.push(initPresetWebFonts(frontMatter.presetWebFonts));\n  }\n\n  if (frontMatter.presetTagify) {\n    presets.push(initPresetTagify(frontMatter.presetTagify));\n  }\n\n  if (frontMatter.presetRemToPx) {\n    presets.push(initPresetRemToPx());\n  }\n\n  const rules = ((frontMatter.rules ?? []) as [string, object][]).map((\n    [pattern, template],\n  ) =>\n    (!pattern.startsWith(\"/\") || !pattern.endsWith(\"/\"))\n      ? [pattern, template]\n      : [\n        new RegExp(pattern.replace(/^\\/|\\/$/g, \"\")),\n        (m: string[]) =>\n          m\n            ? Object.fromEntries(\n              Object.entries(template).map(([key, value]) => [\n                key,\n                value.replace(\n                  /\\$\\{m(?:\\[(\\d+)\\])?\\}/g,\n                  (src, index: string) => {\n                    const idx = index ? parseInt(index, 10) : 1;\n                    return idx < m.length ? m[idx] : src;\n                  },\n                ),\n              ]),\n            )\n            : template,\n      ]\n  );\n\n  initUnocssRuntime({\n    defaults: {\n      rules,\n      presets,\n    },\n  });\n};\n", "import type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.ts\";\nimport { initMermaid } from \"./init-mermaid.ts\";\nimport { initFontAwesome } from \"./init-font-awesome.ts\";\nimport { initUnoCSS } from \"./init-uno-css.ts\";\n\nexport const initAll: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const tasks: Promise<void>[] = [];\n\n  options.useMermaid && tasks.push(initMermaid(options, frontMatter));\n  options.useFontAwesome && tasks.push(initFontAwesome(options, frontMatter));\n  options.useUnoCSS && tasks.push(initUnoCSS(options, frontMatter));\n\n  tasks.length > 0 && await Promise.all(tasks);\n};\n"],
  "mappings": "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",
  "names": ["defaultOptions", "getIcons", "unoCSSUrl", "defaultOptions", "i", "createIconLoader", "iconifyJsonCDN", "key", "dedent", "templ", "values", "_i", "strings", "indentLengths", "arr", "str", "matches", "match", "_a", "_b", "pattern_1", "string", "value", "endentations", "endentation", "indentedValue", "i", "getRandomValues", "rnds8", "rng", "byteToHex", "i", "unsafeStringify", "arr", "offset", "randomUUID", "native_default", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "i", "unsafeStringify", "v4_default", "initMermaid", "options", "frontMatter", "entityDecode", "html", "decoder", "mermaid", "elkLayouts", "iconLoader", "createIconLoader", "icons", "getIcons", "createMermaidIconLoaders", "loaders", "key", "safeRenders", "element", "graphDefinition", "svg", "id", "v4_default", "renderResult", "dedent", "p", "e", "initFontAwesome", "options", "frontMatter", "fontawesomeSvgCore", "freeSolidSvgIcons", "freeRegularSvgIcons", "freeBrandsSvgIcons", "extractIcons", "iconSet", "key", "value", "icons", "styleElement", "error", "initUnoCSS", "options", "frontMatter", "initUnocssRuntime", "initPresetWind", "initPresetMini", "initPresetUno", "initPresetIcons", "initPresetAttributify", "initPresetTypography", "initPresetWebFonts", "initPresetTagify", "initPresetRemToPx", "presets", "presetIcons", "iconLoader", "createIconLoader", "icons", "getIcons", "iconCollections", "collections", "key", "rules", "pattern", "template", "m", "value", "src", "index", "idx", "initAll", "options", "frontMatter", "tasks", "initMermaid", "initFontAwesome", "initUnoCSS"]
}
