{
  "version": 3,
  "sources": ["../src/types.ts", "../src/iconify-json.ts", "../node_modules/.deno/ts-dedent@2.2.0/node_modules/ts-dedent/src/index.ts", "../src/init-mermaid.ts"],
  "sourcesContent": ["import type { Rule } from \"@unocss\";\nimport type { IconsOptions } from \"@unocss/preset-icons\";\nimport type { PresetWindOptions } from \"@unocss/preset-wind\";\nimport type { PresetMiniOptions } from \"@unocss/preset-mini\";\nimport type { AttributifyOptions } from \"@unocss/preset-attributify\";\nimport type { TypographyOptions } from \"@unocss/preset-typography\";\nimport type { WebFontsOptions } from \"@unocss/preset-web-fonts\";\nimport type { TagifyOptions } from \"@unocss/preset-tagify\";\nimport type { MermaidConfig } from \"mermaid\";\nimport type { Config } from \"@fortawesome/fontawesome-svg-core\";\n\nexport type UnoCSSConfig<Theme extends object = object> = {\n  rules?: Rule<Theme>[];\n  presetWind?: PresetWindOptions | null;\n  presetMini?: PresetMiniOptions | null;\n  presetIcons?: IconsOptions | null;\n  presetAttributify?: AttributifyOptions | null;\n  presetTypography?: TypographyOptions | null;\n  presetWebFonts?: WebFontsOptions | null;\n  presetTagify?: TagifyOptions | null;\n  presetRemToPx?: boolean;\n};\n\nexport type MermaidJSConfig = {\n  mermaidConfig?: MermaidConfig;\n};\n\nexport type FontAwesomeConfig = {\n  fontAwesomeConfig?: Config;\n};\n\nexport type ExtraJSUseOptions = {\n  useMermaid?: boolean;\n  useFontAwesome?: boolean;\n  useUnoCSS?: boolean;\n};\n\nexport type ExtraJSFrontMatter =\n  & UnoCSSConfig\n  & MermaidJSConfig\n  & FontAwesomeConfig\n  & ExtraJSUseOptions;\n\nexport type ExtraJSOptions = ExtraJSUseOptions & {\n  discardFrontMatter?: boolean;\n  outputScriptTag?: boolean;\n  mermaidUrl?: string;\n  mermaidElkUrl?: string;\n  fontAwesomeUrl?: string;\n  unoCSSUrl?: string;\n  iconifyJsonCDN?: string;\n};\n\nexport const defaultOptions: {\n  [K in keyof ExtraJSOptions]-?: ExtraJSOptions[K];\n} = {\n  discardFrontMatter: true,\n  outputScriptTag: true,\n  useMermaid: false,\n  useFontAwesome: false,\n  useUnoCSS: false,\n  mermaidUrl: \"https://esm.sh/mermaid\",\n  mermaidElkUrl: \"https://esm.sh/@mermaid-js/layout-elk\",\n  fontAwesomeUrl: \"https://esm.sh/@fortawesome\",\n  unoCSSUrl: \"https://esm.sh/@unocss\",\n  iconifyJsonCDN: \"https://esm.sh\",\n};\n", "import { defaultOptions } from \"./types.ts\";\n\nexport const getIcons = async (\n  unoCSSUrl: string = defaultOptions.unoCSSUrl,\n) =>\n  await import(`${unoCSSUrl}/preset-icons/core`).then((i) =>\n    i.icons as string[]\n  );\n\nexport const createIconLoader =\n  (iconifyJsonCDN: string = defaultOptions.iconifyJsonCDN) =>\n  (key: string) =>\n  () => import(`${iconifyJsonCDN}/@iconify-json/${key}`).then((i) => i.icons);\n", "export function dedent(\n  templ: TemplateStringsArray | string,\n  ...values: unknown[]\n): string {\n  let strings = Array.from(typeof templ === 'string' ? [templ] : templ);\n\n  // 1. Remove trailing whitespace.\n  strings[strings.length - 1] = strings[strings.length - 1].replace(\n    /\\r?\\n([\\t ]*)$/,\n    '',\n  );\n\n  // 2. Find all line breaks to determine the highest common indentation level.\n  const indentLengths = strings.reduce((arr, str) => {\n    const matches = str.match(/\\n([\\t ]+|(?!\\s).)/g);\n    if (matches) {\n      return arr.concat(\n        matches.map((match) => match.match(/[\\t ]/g)?.length ?? 0),\n      );\n    }\n    return arr;\n  }, <number[]>[]);\n\n  // 3. Remove the common indentation from all strings.\n  if (indentLengths.length) {\n    const pattern = new RegExp(`\\n[\\t ]{${Math.min(...indentLengths)}}`, 'g');\n\n    strings = strings.map((str) => str.replace(pattern, '\\n'));\n  }\n\n  // 4. Remove leading whitespace.\n  strings[0] = strings[0].replace(/^\\r?\\n/, '');\n\n  // 5. Perform interpolation.\n  let string = strings[0];\n\n  values.forEach((value, i) => {\n    // 5.1 Read current indentation level\n    const endentations = string.match(/(?:^|\\n)( *)$/)\n    const endentation = endentations ? endentations[1] : ''\n    let indentedValue = value\n    // 5.2 Add indentation to values with multiline strings\n    if (typeof value === 'string' && value.includes('\\n')) {\n      indentedValue = String(value)\n        .split('\\n')\n        .map((str, i) => {\n          return i === 0 ? str : `${endentation}${str}`\n        })\n        .join('\\n');\n    }\n\n    string += indentedValue + strings[i + 1];\n  });\n\n  return string;\n}\n\nexport default dedent;\n", "import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\nimport type { IconifyJSON } from \"@iconify/types\";\nimport { createIconLoader, getIcons } from \"./iconify-json.ts\";\nimport { dedent } from \"ts-dedent\";\n\nexport default async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const entityDecode = function (html: string): string {\n    const decoder = document.createElement(\"div\");\n    html = encodeURIComponent(html).replace(/%26/g, \"&\").replace(/%23/g, \"#\")\n      .replace(/%3B/g, \";\");\n    decoder.innerHTML = html;\n    return decodeURIComponent(decoder.textContent!);\n  };\n\n  if (options.mermaidUrl) {\n    const { default: mermaid } = await import(options.mermaidUrl);\n\n    if (options.mermaidElkUrl) {\n      const { default: elkLayouts } = await import(options.mermaidElkUrl);\n      mermaid.registerLayoutLoaders(elkLayouts);\n    }\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN);\n    const icons = await getIcons(options.unoCSSUrl);\n    const createMermaidIconLoaders = () => {\n      const loaders: { name: string; loader: () => Promise<IconifyJSON> }[] =\n        [];\n      icons.forEach((key: string) => {\n        loaders.push(\n          {\n            name: key,\n            loader: iconLoader(key),\n          },\n        );\n      });\n      return loaders;\n    };\n    mermaid.registerIconPacks(createMermaidIconLoaders());\n\n    mermaid.initialize({\n      ...(frontMatter.mermaidConfig ?? {}),\n      ...{ startOnLoad: false, suppressErrorRendering: true },\n    });\n\n    const renders = Array.from(document.querySelectorAll(\".mermaid\")).map(\n      async (element) => {\n        if (element.getAttribute(\"data-processed\")) {\n          return;\n        }\n        element.setAttribute(\"data-processed\", \"true\");\n        const graphDefinition = element.textContent;\n        element.querySelectorAll(\"svg\").forEach((svg) => svg.remove());\n        if (graphDefinition) {\n          const renderResult = await mermaid.render(\n            `mermaid-${crypto.randomUUID()}`,\n            dedent(entityDecode(graphDefinition))\n              .trim()\n              .replace(/<br\\s*\\/?>/gi, \"<br/>\"),\n          );\n          element.innerHTML = renderResult.svg;\n          renderResult.bindFunctions?.(element);\n        }\n      },\n    );\n    await Promise.all(renders);\n  }\n};\n"],
  "mappings": "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",
  "names": ["defaultOptions", "getIcons", "unoCSSUrl", "defaultOptions", "i", "createIconLoader", "iconifyJsonCDN", "key", "dedent", "templ", "values", "_i", "strings", "indentLengths", "arr", "str", "matches", "match", "_a", "_b", "pattern_1", "string", "value", "i", "endentations", "endentation", "indentedValue", "init_mermaid_default", "options", "frontMatter", "entityDecode", "html", "decoder", "mermaid", "elkLayouts", "iconLoader", "createIconLoader", "icons", "getIcons", "createMermaidIconLoaders", "loaders", "key", "renders", "element", "graphDefinition", "svg", "renderResult", "dedent"]
}
