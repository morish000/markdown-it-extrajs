{
  "version": 3,
  "sources": ["../src/init-font-awesome.ts"],
  "sourcesContent": ["import type {\n  Config,\n  IconDefinition,\n  IconPack,\n} from \"@fortawesome/fontawesome-svg-core\";\nimport type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.js\";\n\nexport const initFontAwesome: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  try {\n    const [\n      fontawesomeSvgCore,\n      freeSolidSvgIcons,\n      freeRegularSvgIcons,\n      freeBrandsSvgIcons,\n    ] = await Promise.all([\n      import(options.fontAwesomeUrl + \"/fontawesome-svg-core\"),\n      import(options.fontAwesomeUrl + \"/free-solid-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-regular-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-brands-svg-icons\"),\n    ]);\n\n    const extractIcons = (\n      iconSet: Record<string, IconPack | IconDefinition | string>,\n    ) => {\n      return Object.entries(iconSet)\n        .filter(([key, value]) =>\n          key !== \"prefix\" && key !== \"default\" && typeof value !== \"string\"\n        )\n        .map(([, value]) => value);\n    };\n\n    const icons = [\n      ...extractIcons(freeSolidSvgIcons),\n      ...extractIcons(freeRegularSvgIcons),\n      ...extractIcons(freeBrandsSvgIcons),\n    ];\n\n    ([\n      \"familyPrefix\",\n      \"cssPrefix\",\n      \"styleDefault\",\n      \"familyDefault\",\n      \"replacementClass\",\n      \"autoReplaceSvg\",\n      \"autoA11y\",\n      \"searchPseudoElements\",\n      \"keepOriginalSource\",\n      \"measurePerformance\",\n      \"mutateApproach\",\n      \"showMissingIcons\",\n    ] as (keyof Config)[]).forEach((key) =>\n      frontMatter.fontAwesomeConfig?.[key] &&\n      (fontawesomeSvgCore.config[key] = frontMatter.fontAwesomeConfig[key])\n    );\n\n    fontawesomeSvgCore.config.observeMutations = false;\n    fontawesomeSvgCore.config.autoAddCss = false;\n    fontawesomeSvgCore.library.add(...icons);\n    fontawesomeSvgCore.dom.i2svg();\n\n    if (!document.getElementById(\"extrajs-fontawesome\")) {\n      const styleElement = document.createElement(\"style\");\n      styleElement.id = \"extrajs-fontawesome\";\n      styleElement.textContent = fontawesomeSvgCore.dom.css();\n      document.head.appendChild(styleElement);\n      const observer = new MutationObserver(() => {\n        if (styleElement && styleElement.textContent === \"\") {\n          styleElement.textContent = fontawesomeSvgCore.dom.css();\n        }\n      });\n      observer.observe(styleElement, {\n        characterData: true,\n        childList: true,\n        subtree: true,\n      });\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n"],
  "mappings": "AAWO,MAAM,kBAAoC,OAC/C,UAA0B,CAAC,GAC3B,cAAkC,CAAC,MAChC;AACH,MAAI;AACF,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,MAAM,QAAQ,IAAI;AAAA,MACpB,OAAO,QAAQ,iBAAiB;AAAA,MAChC,OAAO,QAAQ,iBAAiB;AAAA,MAChC,OAAO,QAAQ,iBAAiB;AAAA,MAChC,OAAO,QAAQ,iBAAiB;AAAA,IAClC,CAAC;AAED,UAAM,eAAe,CACnB,YACG;AACH,aAAO,OAAO,QAAQ,OAAO,EAC1B;AAAA,QAAO,CAAC,CAAC,KAAK,KAAK,MAClB,QAAQ,YAAY,QAAQ,aAAa,OAAO,UAAU;AAAA,MAC5D,EACC,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM,KAAK;AAAA,IAC7B;AAEA,UAAM,QAAQ;AAAA,MACZ,GAAG,aAAa,iBAAiB;AAAA,MACjC,GAAG,aAAa,mBAAmB;AAAA,MACnC,GAAG,aAAa,kBAAkB;AAAA,IACpC;AAEA,IAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAuB;AAAA,MAAQ,CAAC,QAC9B,YAAY,oBAAoB,GAAG,MAClC,mBAAmB,OAAO,GAAG,IAAI,YAAY,kBAAkB,GAAG;AAAA,IACrE;AAEA,uBAAmB,OAAO,mBAAmB;AAC7C,uBAAmB,OAAO,aAAa;AACvC,uBAAmB,QAAQ,IAAI,GAAG,KAAK;AACvC,uBAAmB,IAAI,MAAM;AAE7B,QAAI,CAAC,SAAS,eAAe,qBAAqB,GAAG;AACnD,YAAM,eAAe,SAAS,cAAc,OAAO;AACnD,mBAAa,KAAK;AAClB,mBAAa,cAAc,mBAAmB,IAAI,IAAI;AACtD,eAAS,KAAK,YAAY,YAAY;AACtC,YAAM,WAAW,IAAI,iBAAiB,MAAM;AAC1C,YAAI,gBAAgB,aAAa,gBAAgB,IAAI;AACnD,uBAAa,cAAc,mBAAmB,IAAI,IAAI;AAAA,QACxD;AAAA,MACF,CAAC;AACD,eAAS,QAAQ,cAAc;AAAA,QAC7B,eAAe;AAAA,QACf,WAAW;AAAA,QACX,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF,SAAS,OAAO;AACd,UAAM;AAAA,EACR;AACF;",
  "names": []
}
