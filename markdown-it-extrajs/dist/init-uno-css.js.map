{
  "version": 3,
  "sources": ["../src/init-uno-css.ts"],
  "sourcesContent": ["import type { IconifyJSON } from \"@iconify/types\";\nimport type { Preflight, PresetOrFactory } from \"@unocss/core\";\nimport type {\n  ExtraJSFrontMatter,\n  ExtraJSOptions,\n  InitFunctionType,\n} from \"./types.js\";\nimport { createIconLoader, getIcons } from \"./iconify-json.js\";\n\nexport const initUnoCSS: InitFunctionType = async (\n  options: ExtraJSOptions = {},\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const [\n    { default: initUnocssRuntime },\n    { default: initPresetWind },\n    { default: initPresetMini },\n    { default: initPresetUno },\n    { default: initPresetIcons },\n    { default: initPresetAttributify },\n    { default: initPresetTypography },\n    { default: initPresetWebFonts },\n    { default: initPresetTagify },\n    { default: initPresetRemToPx },\n  ] = await Promise.all([\n    import(options.unoCSSUrl + \"/runtime\"),\n    frontMatter.presetWind\n      ? import(options.unoCSSUrl + \"/preset-wind\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-mini\")\n      : Promise.resolve({}),\n    (!frontMatter.presetWind && !frontMatter.presetMini)\n      ? import(options.unoCSSUrl + \"/preset-uno\")\n      : Promise.resolve({}),\n    frontMatter.presetIcons\n      ? import(options.unoCSSUrl + \"/preset-icons/browser\")\n      : Promise.resolve({}),\n    frontMatter.presetAttributify\n      ? import(options.unoCSSUrl + \"/preset-attributify\")\n      : Promise.resolve({}),\n    frontMatter.presetTypography\n      ? import(options.unoCSSUrl + \"/preset-typography\")\n      : Promise.resolve({}),\n    frontMatter.presetWebFonts\n      ? import(options.unoCSSUrl + \"/preset-web-fonts\")\n      : Promise.resolve({}),\n    frontMatter.presetTagify\n      ? import(options.unoCSSUrl + \"/preset-tagify\")\n      : Promise.resolve({}),\n    frontMatter.presetRemToPx\n      ? import(options.unoCSSUrl + \"/preset-rem-to-px\")\n      : Promise.resolve({}),\n  ]);\n\n  const presets: PresetOrFactory[] = [];\n\n  if (frontMatter.presetWind) {\n    presets.push(initPresetWind(frontMatter.presetWind));\n  } else if (frontMatter.presetMini) {\n    presets.push(initPresetMini(frontMatter.presetMini));\n  } else {\n    presets.push(initPresetUno());\n  }\n\n  if (frontMatter.presetIcons) {\n    const presetIcons = { ...frontMatter.presetIcons };\n\n    const iconLoader = createIconLoader(options.iconifyJsonCDN);\n    const icons = await getIcons(options.unoCSSUrl);\n\n    const iconCollections: () => Record<string, () => Promise<IconifyJSON>> =\n      () => {\n        const collections: Record<string, () => Promise<IconifyJSON>> = {};\n        icons.forEach((key: string) => {\n          collections[key] = iconLoader(key);\n        });\n\n        return collections;\n      };\n\n    presetIcons.autoInstall = false;\n    presetIcons.collections = {\n      ...iconCollections(),\n    };\n    presets.push(initPresetIcons(presetIcons));\n  }\n\n  if (frontMatter.presetAttributify) {\n    presets.push(initPresetAttributify(frontMatter.presetAttributify));\n  }\n\n  if (frontMatter.presetTypography) {\n    presets.push(initPresetTypography(frontMatter.presetTypography));\n  }\n\n  if (frontMatter.presetWebFonts) {\n    presets.push(initPresetWebFonts(frontMatter.presetWebFonts));\n  }\n\n  if (frontMatter.presetTagify) {\n    presets.push(initPresetTagify(frontMatter.presetTagify));\n  }\n\n  if (frontMatter.presetRemToPx) {\n    presets.push(initPresetRemToPx());\n  }\n\n  // deno-lint-ignore no-explicit-any\n  const replacePlaceholders = (m: string[], value: any): any => {\n    if (typeof value === \"string\") {\n      return value.replace(\n        /\\$\\{m(?:\\[(\\d+)\\])?\\}/g,\n        (src: string, index: string) => {\n          const idx = index ? parseInt(index, 10) : 1;\n          return idx < m.length ? m[idx] : src;\n        },\n      );\n    } else if (typeof value === \"object\" && value !== null) {\n      return Object.fromEntries(\n        Object.entries(value).map(([key, val]) => [\n          key,\n          replacePlaceholders(m, val),\n        ]),\n      );\n    }\n    return value;\n  };\n\n  const rules = ((frontMatter.rules ?? []) as [string, object][]).map(\n    ([pattern, template]) =>\n      !pattern.startsWith(\"/\") || !pattern.endsWith(\"/\")\n        ? [pattern, template]\n        : [\n          new RegExp(pattern.replace(/^\\/|\\/$/g, \"\")),\n          (m: string[]) => (m ? replacePlaceholders(m, template) : template),\n        ],\n  );\n\n  const preflights: Preflight[] = [];\n  if (frontMatter.preflightStyle) {\n    preflights.push({\n      getCSS: () => frontMatter.preflightStyle ?? \"\",\n    });\n  }\n\n  initUnocssRuntime({\n    defaults: {\n      rules,\n      presets,\n      preflights,\n    },\n  });\n};\n"],
  "mappings": "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",
  "names": []
}
