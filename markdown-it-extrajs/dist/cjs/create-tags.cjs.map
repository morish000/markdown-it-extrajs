{
  "version": 3,
  "sources": ["../../src/create-tags.ts", "../../src/init-mermaid.ts", "../../src/init-font-asesome.ts", "../../src/init-uno-css.ts"],
  "sourcesContent": ["import initMermaid from \"./init-mermaid.ts\";\nimport initFontAwesome from \"./init-font-asesome.ts\";\nimport initUnoCSS from \"./init-uno-css.ts\";\nimport type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport const initAll = (\n  extrajsOptions: ExtraJSOptions,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\nexport default async (_conf = {}) => {\n  const tasks = [];\n${\n      extrajsOptions.useMermaid\n        ? `\n  const mermaidScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-mermaid-js');\n  if (mermaidScript) {\n    tasks.push(\n      (async () => {\n        const initMermaid = await import(\"data:text/javascript;base64,\" + mermaidScript);\n        await initMermaid.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `\n  const fontAwesomeScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-font-awesome');\n  if (fontAwesomeScript) {\n    tasks.push(\n      (async () => {\n        const initFontAwesome = await import(\"data:text/javascript;base64,\" + fontAwesomeScript);\n        await initFontAwesome.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `\n  const unoCSSScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-uno-css');\n  if (unoCSSScript) {\n    tasks.push(\n      (async () => {\n        const initUnoCSS = await import(\"data:text/javascript;base64,\" + unoCSSScript);\n        await initUnoCSS.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n  tasks.length > 0 && await Promise.all(tasks);\n};`\n    : \"\";\n\nexport const createTemplateTag = (\n  extrajsOptions: ExtraJSOptions,\n  frontMatter: ExtraJSFrontMatter,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\n<template\n  id=\"extrajs\"\n${\n      extrajsOptions.useMermaid\n        ? `data-extrajs-mermaid-js=\"${\n          btoa(initMermaid(extrajsOptions, frontMatter))\n        }\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `data-extrajs-font-awesome=\"${\n          btoa(initFontAwesome(extrajsOptions, frontMatter))\n        }\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `data-extrajs-uno-css=\"${\n          btoa(\n            initUnoCSS(\n              extrajsOptions,\n              frontMatter,\n            ),\n          )\n        }\"`\n        : \"\"\n    }\n${`data-extrajs-init=\"${\n      btoa(\n        initAll(extrajsOptions),\n      )\n    }\"`}>\n</template>`\n    : \"\";\n\nexport const createScriptTag = (\n  extrajsOptions: ExtraJSOptions,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS) && extrajsOptions.outputScriptTag\n    ? `\n<script type=\"module\">\n  const initScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-init');\n  if (initScript) {\n    const init = await import(\"data:text/javascript;base64,\" + initScript);\n    await init.default();\n  }\n</script>`\n    : \"\";\n", "import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport const initMermaid = (\n  options: ExtraJSOptions,\n  _frontMatter: ExtraJSFrontMatter,\n) =>\n  `export default async (_ = {}) => {\n    const mermaid = await import(\"${options.mermaidUrl}\");\n    mermaid.default.init();\n};`;\n\nexport default initMermaid;\n", "import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport const initFontAsesome = (\n  options: ExtraJSOptions,\n  _frontMatter: ExtraJSFrontMatter,\n) =>\n  `const extractIcons = (iconSet) => {\n    return Object.entries(iconSet)\n        .filter(([key, value]) =>\n            key !== \"prefix\" && key !== \"default\" && typeof value !== \"string\"\n        )\n        .map(([, value]) => value);\n};\n\nexport default async (_ = {}) => {\n    try {\n        const [\n            fontawesomeSvgCore,\n            freeSolidSvgIcons,\n            freeRegularSvgIcons,\n            freeBrandsSvgIcons,\n        ] = await Promise.all([\n            import(\"${options.fontAwesomeUrl}/fontawesome-svg-core\"),\n            import(\"${options.fontAwesomeUrl}/free-solid-svg-icons\"),\n            import(\"${options.fontAwesomeUrl}/free-regular-svg-icons\"),\n            import(\"${options.fontAwesomeUrl}/free-brands-svg-icons\"),\n        ]);\n\n        const icons = [\n            ...extractIcons(freeSolidSvgIcons),\n            ...extractIcons(freeRegularSvgIcons),\n            ...extractIcons(freeBrandsSvgIcons),\n        ];\n\n        fontawesomeSvgCore.config.autoAddCss = false;\n        fontawesomeSvgCore.library.add(...icons);\n        fontawesomeSvgCore.dom.i2svg();\n        fontawesomeSvgCore.dom.watch();\n\n        if (!document.getElementById(\"extrajs-fontawesome\")) {\n            const styleElement = document.createElement(\"style\");\n            styleElement.id = \"extrajs-fontawesome\";\n            styleElement.textContent = fontawesomeSvgCore.dom.css();\n            document.head.appendChild(styleElement);\n            const observer = new MutationObserver(() => {\n                if (styleElement && styleElement.textContent === \"\") {\n                    styleElement.textContent = fontawesomeSvgCore.dom.css();\n                }\n            });\n            observer.observe(styleElement, {\n                characterData: true,\n                childList: true,\n                subtree: true,\n            });\n        }\n    } catch (error) {\n        throw error;\n    }\n};`;\n\nexport default initFontAsesome;\n", "import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport const initUnoCSS = (\n  options: ExtraJSOptions,\n  frontMatter: ExtraJSFrontMatter = {},\n) => {\n  const conf = {\n    ...frontMatter,\n  };\n  if (conf.presetIcons) {\n    conf.presetIcons.cdn = options.unoCSSPresetIconCDN;\n  }\n\n  return `\nimport initUnocssRuntime from \"${options.unoCSSUrl}/runtime\";\nimport initPresetIcons from \"${options.unoCSSUrl}/preset-icons/browser\";\nimport initPresetUno from \"${options.unoCSSUrl}/preset-uno\";\nimport initPresetWind from \"${options.unoCSSUrl}/preset-wind\";\nimport initPresetMini from \"${options.unoCSSUrl}/preset-mini\";\nimport initPresetAttributify from \"${options.unoCSSUrl}/preset-attributify\";\nimport initPresetTypography from \"${options.unoCSSUrl}/preset-typography\";\nimport initPresetWebFonts from \"${options.unoCSSUrl}/preset-web-fonts\";\nimport initPresetTagify from \"${options.unoCSSUrl}/preset-tagify\";\nimport initPresetRemToPx from \"${options.unoCSSUrl}/preset-rem-to-px\";\n\nconst options = ${JSON.stringify(options)};\nconst conf = ${JSON.stringify(conf)};\n\nexport default async (_conf = {}) => {\n    const presets = [];\n\n    if (conf.presetWind) {\n        presets.push(initPresetWind(conf.presetWind));\n    } else if (conf.presetMini) {\n        presets.push(initPresetMini(conf.presetMini));\n    } else {\n        presets.push(initPresetUno());\n    }\n\n    if (conf.presetIcons) {\n        const presetIcons = { ...conf.presetIcons };\n        if (_conf?.presetIcons?.collections && options.useBundleIconifyJson) {\n            presetIcons.autoInstall = false;\n            presetIcons.collections = _conf.presetIcons.collections;\n        }\n        presets.push(initPresetIcons(presetIcons));\n    }\n\n    if (conf.presetAttributify) {\n        presets.push(initPresetAttributify(conf.presetAttributify));\n    }\n\n    if (conf.presetTypography) {\n        presets.push(initPresetTypography(conf.presetTypography));\n    }\n\n    if (conf.presetWebFonts) {\n        presets.push(initPresetWebFonts(conf.presetWebFonts));\n    }\n\n    if (conf.presetTagify) {\n        presets.push(initPresetTagify(conf.presetTagify));\n    }\n\n    if (conf.presetRemToPx) {\n        presets.push(initPresetRemToPx());\n    }\n\n    const rules = conf.rules ?? [];\n\n    initUnocssRuntime({\n        defaults: {\n            rules,\n            presets,\n        },\n    });\n};\n`;\n};\n\nexport default initUnoCSS;\n"],
  "mappings": "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",
  "names": ["create_tags_exports", "__export", "createScriptTag", "createTemplateTag", "initAll", "__toCommonJS", "initMermaid", "options", "_frontMatter", "init_mermaid_default", "initFontAsesome", "options", "_frontMatter", "init_font_asesome_default", "initUnoCSS", "options", "frontMatter", "conf", "init_uno_css_default", "initAll", "extrajsOptions", "createTemplateTag", "frontMatter", "init_mermaid_default", "init_font_asesome_default", "init_uno_css_default", "createScriptTag"]
}
