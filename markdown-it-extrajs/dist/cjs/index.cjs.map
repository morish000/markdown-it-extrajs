{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/plugin.ts", "../../src/init-mermaid.ts", "../../src/init-font-asesome.ts", "../../src/init-uno-css.ts", "../../src/create-tags.ts"],
  "sourcesContent": ["import extraJsPlugin from \"./plugin.ts\";\nexport default extraJsPlugin;\n\nexport * from \"./types.ts\";\nexport * from \"./create-tags.ts\";\n", "// @deno-types=\"@types/markdown-it\"\nimport type MarkdownIt from \"markdown-it\";\nimport frontMatter from \"markdown-it-front-matter\";\nimport grayMatter from \"gray-matter\";\nimport { createScriptTag, createTemplateTag } from \"./create-tags.ts\";\nimport type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nconst defaultExtraJSOptions: ExtraJSOptions = {\n  discardFrontMatter: true,\n  useMermaid: false,\n  mermaidUrl: \"https://esm.sh/mermaid\",\n  useFontAwesome: false,\n  fontAwesomeUrl: \"https://esm.sh/@fortawesome\",\n  useUnoCSS: false,\n  unoCSSUrl: \"https://esm.sh/@unocss\",\n  unoCSSPresetIconCDN: \"https://esm.sh/\",\n  outputScriptTag: true,\n};\n\nexport function extraJsPlugin(md: MarkdownIt, userOptions: ExtraJSOptions) {\n  const { renderer: { render }, parse } = md;\n\n  let extraJsFrontMatter: ExtraJSFrontMatter = {};\n\n  if (userOptions.discardFrontMatter) {\n    md.use(frontMatter, (_fm: string) => {\n      // Discard front matter\n    });\n  }\n\n  md.parse = (markdown: string, env) => {\n    extraJsFrontMatter = grayMatter(markdown).data.extrajs ?? {};\n    return parse.call(md, markdown, env);\n  };\n\n  md.renderer.render = function (\n    ...args\n  ) {\n    const conf: ExtraJSFrontMatter = extraJsFrontMatter\n      ? { ...extraJsFrontMatter }\n      : {};\n    const extrajsOptions: ExtraJSOptions = {\n      ...defaultExtraJSOptions,\n      ...userOptions,\n      ...(conf.disableMermaid ? { useMermaid: false } : {}),\n      ...(conf.disableFontAwesome ? { useFontAwesome: false } : {}),\n      ...(conf.disableUnoCSS ? { useUnoCSS: false } : {}),\n    };\n\n    return render.apply(md.renderer, args) +\n      createTemplateTag(extrajsOptions, conf) +\n      createScriptTag(extrajsOptions);\n  };\n}\n\nexport default extraJsPlugin;\n", "export const initMermaid = (\n  url: string = \"https://esm.sh/mermaid\",\n) =>\n  `export default async (_ = {}) => {\n    const mermaid = await import(\"${url}\");\n    mermaid.default.init();\n};`;\n\nexport default initMermaid;\n", "export const initFontAsesome = (url: string = \"https://esm.sh/@fortawesome\") =>\n  `const extractIcons = (iconSet) => {\n    return Object.entries(iconSet)\n        .filter(([key, value]) =>\n            key.startsWith(\"fa\") && typeof value !== \"function\"\n        )\n        .map(([, value]) => value);\n};\n\nexport default async (_ = {}) => {\n    try {\n        const [\n            fontawesomeSvgCore,\n            freeSolidSvgIcons,\n            freeRegularSvgIcons,\n            freeBrandsSvgIcons,\n        ] = await Promise.all([\n            import(\"${url}/fontawesome-svg-core\"),\n            import(\"${url}/free-solid-svg-icons\"),\n            import(\"${url}/free-regular-svg-icons\"),\n            import(\"${url}/free-brands-svg-icons\"),\n        ]);\n\n        const icons = [\n            ...extractIcons(freeSolidSvgIcons),\n            ...extractIcons(freeRegularSvgIcons),\n            ...extractIcons(freeBrandsSvgIcons),\n        ];\n\n        fontawesomeSvgCore.library.add(...icons);\n        fontawesomeSvgCore.dom.i2svg();\n        fontawesomeSvgCore.dom.watch();\n    } catch (error) {\n        throw error;\n    }\n};`;\n\nexport default initFontAsesome;\n", "import type { UnoCSSConfig } from \"./types.ts\";\n\nexport const initUnoCSS = (\n  url: string = \"https://esm.sh/@unocss\",\n  unoCSSPresetIconCDN: string = \"https://esm.sh/\",\n  conf: UnoCSSConfig = {},\n) => {\n  const safeConf = {\n    ...conf,\n  };\n  if (safeConf.presetIcons) {\n    safeConf.presetIcons.cdn = unoCSSPresetIconCDN;\n  }\n\n  return `\nimport initUnocssRuntime from \"${url}/runtime\";\nimport initPresetIcons from \"${url}/preset-icons/browser\";\nimport initPresetUno from \"${url}/preset-uno\";\nimport initPresetWind from \"${url}/preset-wind\";\nimport initPresetMini from \"${url}/preset-mini\";\nimport initPresetAttributify from \"${url}/preset-attributify\";\nimport initPresetTypography from \"${url}/preset-typography\";\nimport initPresetWebFonts from \"${url}/preset-web-fonts\";\nimport initPresetTagify from \"${url}/preset-tagify\";\nimport initPresetRemToPx from \"${url}/preset-rem-to-px\";\n\nconst conf = ${JSON.stringify(safeConf)};\n\nexport default async (_conf = {}) => {\n    const presets = [];\n\n    if (conf.presetWind) {\n        presets.push(initPresetWind(conf.presetWind));\n    } else if (conf.presetMini) {\n        presets.push(initPresetMini(conf.presetMini));\n    } else {\n        presets.push(initPresetUno());\n    }\n\n    if (conf.presetIcons) {\n        const presetIcons = { ...conf.presetIcons };\n        if (_conf?.presetIcons?.collections) {\n            presetIcons.autoInstall = false;\n            presetIcons.collections = _conf.presetIcons.collections;\n        }\n        presets.push(initPresetIcons(presetIcons));\n    }\n\n    if (conf.presetAttributify) {\n        presets.push(initPresetAttributify(conf.presetAttributify));\n    }\n\n    if (conf.presetTypography) {\n        presets.push(initPresetTypography(conf.presetTypography));\n    }\n\n    if (conf.presetWebFonts) {\n        presets.push(initPresetWebFonts(conf.presetWebFonts));\n    }\n\n    if (conf.presetTagify) {\n        presets.push(initPresetTagify(conf.presetTagify));\n    }\n\n    if (conf.presetRemToPx) {\n        presets.push(initPresetRemToPx());\n    }\n\n    const rules = conf.rules ?? [];\n\n    initUnocssRuntime({\n        defaults: {\n            rules,\n            presets,\n        },\n    });\n};\n`;\n};\n\nexport default initUnoCSS;\n", "import initMermaid from \"./init-mermaid.ts\";\nimport initFontAwesome from \"./init-font-asesome.ts\";\nimport initUnoCSS from \"./init-uno-css.ts\";\nimport type { ExtraJSOptions, UnoCSSConfig } from \"./types.ts\";\n\nexport const initAll = (\n  extrajsOptions: ExtraJSOptions,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\nexport default async (_conf = {}) => {\n  const tasks = [];\n${\n      extrajsOptions.useMermaid\n        ? `\n  const mermaidScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-mermaid-js');\n  if (mermaidScript) {\n    tasks.push(\n      (async () => {\n        const initMermaid = await import(\"data:text/javascript;base64,\" + mermaidScript);\n        await initMermaid.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `\n  const fontAwesomeScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-font-awesome');\n  if (fontAwesomeScript) {\n    tasks.push(\n      (async () => {\n        const initFontAwesome = await import(\"data:text/javascript;base64,\" + fontAwesomeScript);\n        await initFontAwesome.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `\n  const unoCSSScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-uno-css');\n  if (unoCSSScript) {\n    tasks.push(\n      (async () => {\n        const initUnoCSS = await import(\"data:text/javascript;base64,\" + unoCSSScript);\n        await initUnoCSS.default(_conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n  tasks.length > 0 && await Promise.all(tasks);\n};`\n    : \"\";\n\nexport const createTemplateTag = (\n  extrajsOptions: ExtraJSOptions,\n  conf: UnoCSSConfig,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\n<template\n  id=\"extrajs\"\n${\n      extrajsOptions.useMermaid\n        ? `data-extrajs-mermaid-js=\"${\n          btoa(initMermaid(extrajsOptions.mermaidUrl))\n        }\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `data-extrajs-font-awesome=\"${\n          btoa(initFontAwesome(extrajsOptions.fontAwesomeUrl))\n        }\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `data-extrajs-uno-css=\"${\n          btoa(\n            initUnoCSS(\n              extrajsOptions.unoCSSUrl,\n              extrajsOptions.unoCSSPresetIconCDN,\n              conf,\n            ),\n          )\n        }\"`\n        : \"\"\n    }\n${`data-extrajs-init=\"${\n      btoa(\n        initAll(extrajsOptions),\n      )\n    }\"`}>\n</template>`\n    : \"\";\n\nexport const createScriptTag = (\n  extrajsOptions: ExtraJSOptions,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS) && extrajsOptions.outputScriptTag\n    ? `\n<script type=\"module\">\n  const initScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-init');\n  if (initScript) {\n    const init = await import(\"data:text/javascript;base64,\" + initScript);\n    await init.default();\n  }\n</script>`\n    : \"\";\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "createScriptTag", "createTemplateTag", "src_default", "initAll", "__toCommonJS", "import_markdown_it_front_matter", "import_gray_matter", "initMermaid", "url", "init_mermaid_default", "initFontAsesome", "url", "init_font_asesome_default", "initUnoCSS", "url", "unoCSSPresetIconCDN", "conf", "safeConf", "init_uno_css_default", "initAll", "extrajsOptions", "createTemplateTag", "conf", "init_mermaid_default", "init_font_asesome_default", "init_uno_css_default", "createScriptTag", "defaultExtraJSOptions", "extraJsPlugin", "md", "userOptions", "render", "parse", "extraJsFrontMatter", "frontMatter", "_fm", "markdown", "env", "grayMatter", "args", "conf", "extrajsOptions", "createTemplateTag", "createScriptTag", "plugin_default", "src_default", "plugin_default"]
}
