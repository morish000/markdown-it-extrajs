{
  "version": 3,
  "sources": ["../../src/plugin.ts", "../../src/init-mermaid.ts", "../../src/init-font-asesome.ts", "../../src/init-uno-css.ts", "../../src/create-tags.ts", "../../src/index.ts"],
  "sourcesContent": ["// @deno-types=\"@types/markdown-it\"\nimport type MarkdownIt from \"markdown-it\";\nimport markdownItFrontMatter from \"markdown-it-front-matter\";\nimport grayMatter from \"gray-matter\";\nimport { createScriptTag, createTemplateTag } from \"./create-tags.ts\";\nimport type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nconst defaultOptions: ExtraJSOptions = {\n  discardFrontMatter: true,\n  useMermaid: false,\n  mermaidUrl: \"https://esm.sh/mermaid\",\n  useFontAwesome: false,\n  fontAwesomeUrl: \"https://esm.sh/@fortawesome\",\n  useUnoCSS: false,\n  unoCSSUrl: \"https://esm.sh/@unocss\",\n  unoCSSPresetIconCDN: \"https://esm.sh/\",\n  outputScriptTag: true,\n};\n\nexport function extraJsPlugin(md: MarkdownIt, userOptions: ExtraJSOptions) {\n  const { renderer: { render }, parse } = md;\n\n  let frontMatter: ExtraJSFrontMatter = {};\n\n  if (userOptions.discardFrontMatter) {\n    md.use(markdownItFrontMatter, (_fm: string) => {\n      // Discard front matter\n    });\n  }\n\n  md.parse = (markdown: string, env) => {\n    frontMatter = grayMatter(markdown).data.extrajs ?? {};\n    return parse.call(md, markdown, env);\n  };\n\n  md.renderer.render = function (\n    ...args\n  ) {\n    const options: ExtraJSOptions = {\n      ...defaultOptions,\n      ...userOptions,\n      ...(!frontMatter.useMermaid ? { useMermaid: false } : {}),\n      ...(!frontMatter.useFontAwesome ? { useFontAwesome: false } : {}),\n      ...(!frontMatter.useUnoCSS ? { useUnoCSS: false } : {}),\n    };\n\n    return render.apply(md.renderer, args) +\n      createTemplateTag(options, frontMatter) +\n      createScriptTag(options, frontMatter);\n  };\n}\n\nexport default extraJsPlugin;\n", "export const initMermaid = () =>\n  `export default async (options = {}, _frontMatter = {}, _conf = {}) => {\n    const mermaid = await import(options.mermaidUrl);\n    mermaid.default.init();\n};`;\n\nexport default initMermaid;\n", "export const initFontAsesome = () =>\n  `const extractIcons = (iconSet) => {\n    return Object.entries(iconSet)\n        .filter(([key, value]) =>\n            key !== \"prefix\" && key !== \"default\" && typeof value !== \"string\"\n        )\n        .map(([, value]) => value);\n};\n\nexport default async (options = {}, _frontMatter = {}, _conf = {}) => {\n    try {\n        const [\n            fontawesomeSvgCore,\n            freeSolidSvgIcons,\n            freeRegularSvgIcons,\n            freeBrandsSvgIcons,\n        ] = await Promise.all([\n            import(options.fontAwesomeUrl + \"/fontawesome-svg-core\"),\n            import(options.fontAwesomeUrl + \"/free-solid-svg-icons\"),\n            import(options.fontAwesomeUrl + \"/free-regular-svg-icons\"),\n            import(options.fontAwesomeUrl + \"/free-brands-svg-icons\"),\n        ]);\n\n        const icons = [\n            ...extractIcons(freeSolidSvgIcons),\n            ...extractIcons(freeRegularSvgIcons),\n            ...extractIcons(freeBrandsSvgIcons),\n        ];\n\n        fontawesomeSvgCore.config.autoAddCss = false;\n        fontawesomeSvgCore.library.add(...icons);\n        fontawesomeSvgCore.dom.i2svg();\n        fontawesomeSvgCore.dom.watch();\n\n        if (!document.getElementById(\"extrajs-fontawesome\")) {\n            const styleElement = document.createElement(\"style\");\n            styleElement.id = \"extrajs-fontawesome\";\n            styleElement.textContent = fontawesomeSvgCore.dom.css();\n            document.head.appendChild(styleElement);\n            const observer = new MutationObserver(() => {\n                if (styleElement && styleElement.textContent === \"\") {\n                    styleElement.textContent = fontawesomeSvgCore.dom.css();\n                }\n            });\n            observer.observe(styleElement, {\n                characterData: true,\n                childList: true,\n                subtree: true,\n            });\n        }\n    } catch (error) {\n        throw error;\n    }\n};`;\n\nexport default initFontAsesome;\n", "export const initUnoCSS = () =>\n  `export default async (options = {}, frontMatter = {}, _conf = {}) => {\n    const conf = {\n        ...frontMatter,\n    };\n    if (conf.presetIcons) {\n        conf.presetIcons.cdn = options.unoCSSPresetIconCDN;\n    }\n\n    const [\n        { default: initUnocssRuntime },\n        { default: initPresetIcons },\n        { default: initPresetUno },\n        { default: initPresetWind },\n        { default: initPresetMini },\n        { default: initPresetAttributify },\n        { default: initPresetTypography },\n        { default: initPresetWebFonts },\n        { default: initPresetTagify },\n        { default: initPresetRemToPx },\n    ] = await Promise.all([\n        import(options.unoCSSUrl + \"/runtime\"),\n        import(options.unoCSSUrl + \"/preset-icons/browser\"),\n        import(options.unoCSSUrl + \"/preset-uno\"),\n        import(options.unoCSSUrl + \"/preset-wind\"),\n        import(options.unoCSSUrl + \"/preset-mini\"),\n        import(options.unoCSSUrl + \"/preset-attributify\"),\n        import(options.unoCSSUrl + \"/preset-typography\"),\n        import(options.unoCSSUrl + \"/preset-web-fonts\"),\n        import(options.unoCSSUrl + \"/preset-tagify\"),\n        import(options.unoCSSUrl + \"/preset-rem-to-px\"),\n    ]);\n\n    const presets = [];\n\n    if (conf.presetWind) {\n        presets.push(initPresetWind(conf.presetWind));\n    } else if (conf.presetMini) {\n        presets.push(initPresetMini(conf.presetMini));\n    } else {\n        presets.push(initPresetUno());\n    }\n\n    if (conf.presetIcons) {\n        const presetIcons = { ...conf.presetIcons };\n        if (_conf?.presetIcons?.collections && options.useBundleIconifyJson) {\n            presetIcons.autoInstall = false;\n            presetIcons.collections = _conf.presetIcons.collections;\n        }\n        presets.push(initPresetIcons(presetIcons));\n    }\n\n    if (conf.presetAttributify) {\n        presets.push(initPresetAttributify(conf.presetAttributify));\n    }\n\n    if (conf.presetTypography) {\n        presets.push(initPresetTypography(conf.presetTypography));\n    }\n\n    if (conf.presetWebFonts) {\n        presets.push(initPresetWebFonts(conf.presetWebFonts));\n    }\n\n    if (conf.presetTagify) {\n        presets.push(initPresetTagify(conf.presetTagify));\n    }\n\n    if (conf.presetRemToPx) {\n        presets.push(initPresetRemToPx());\n    }\n\n    const rules = conf.rules ?? [];\n\n    initUnocssRuntime({\n        defaults: {\n            rules,\n            presets,\n        },\n    });\n};`;\n\nexport default initUnoCSS;\n", "import initMermaid from \"./init-mermaid.ts\";\nimport initFontAwesome from \"./init-font-asesome.ts\";\nimport initUnoCSS from \"./init-uno-css.ts\";\nimport type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\n\nexport const initAll = (\n  extrajsOptions: ExtraJSOptions,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\nexport default async (options = {}, frontMatter = {}, _conf = {}) => {\n  const tasks = [];\n${\n      extrajsOptions.useMermaid\n        ? `\n  const mermaidScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-mermaid-js');\n  if (mermaidScript) {\n    tasks.push(\n      (async () => {\n        const initMermaid = await import(\"data:text/javascript;base64,\" + mermaidScript);\n        await initMermaid.default(options, frontMatter, _conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `\n  const fontAwesomeScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-font-awesome');\n  if (fontAwesomeScript) {\n    tasks.push(\n      (async () => {\n        const initFontAwesome = await import(\"data:text/javascript;base64,\" + fontAwesomeScript);\n        await initFontAwesome.default(options, frontMatter, _conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `\n  const unoCSSScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-uno-css');\n  if (unoCSSScript) {\n    tasks.push(\n      (async () => {\n        const initUnoCSS = await import(\"data:text/javascript;base64,\" + unoCSSScript);\n        await initUnoCSS.default(options, frontMatter, _conf);\n      })()\n    );\n  }`\n        : \"\"\n    }\n  tasks.length > 0 && await Promise.all(tasks);\n};`\n    : \"\";\n\nexport const createTemplateTag = (\n  extrajsOptions: ExtraJSOptions,\n  frontMatter: ExtraJSFrontMatter,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS)\n    ? `\n<template\n  id=\"extrajs\"\n${\n      extrajsOptions.useMermaid\n        ? `data-extrajs-mermaid-js=\"${btoa(initMermaid())}\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useFontAwesome\n        ? `data-extrajs-font-awesome=\"${btoa(initFontAwesome())}\"`\n        : \"\"\n    }\n${\n      extrajsOptions.useUnoCSS\n        ? `data-extrajs-uno-css=\"${btoa(initUnoCSS())}\"`\n        : \"\"\n    }\n${`data-extrajs-init=\"${btoa(initAll(extrajsOptions))}\"`}\n${`data-extrajs-options=\"${\n      btoa(\"export default\" + JSON.stringify(extrajsOptions))\n    }\"`}\n${`data-extrajs-frontMatter=\"${\n      btoa(\"export default\" + JSON.stringify(frontMatter))\n    }\"`}>\n</template>`\n    : \"\";\n\nexport const createScriptTag = (\n  extrajsOptions: ExtraJSOptions,\n  frontMatter: ExtraJSFrontMatter,\n): string =>\n  (extrajsOptions.useMermaid || extrajsOptions.useFontAwesome ||\n      extrajsOptions.useUnoCSS) && extrajsOptions.outputScriptTag\n    ? `\n<script type=\"module\">\n  const initScript = document.getElementById('extrajs')?.getAttribute('data-extrajs-init');\n  if (initScript) {\n    const init = await import(\"data:text/javascript;base64,\" + initScript);\n    await init.default(\n      ${JSON.stringify(extrajsOptions)},\n      ${JSON.stringify(frontMatter)},\n      {}\n    );\n  }\n  const [\n    { default: attrOptions },\n    { default: attrFrontMatter },\n  ] = await Promise.all([\n    import(\"data:text/javascript;base64,\" + document.getElementById('extrajs')?.getAttribute('data-extrajs-options')),\n    import(\"data:text/javascript;base64,\" + document.getElementById('extrajs')?.getAttribute('data-extrajs-frontMatter')),\n  ]);\n  console.log(attrOptions);\n  console.log(attrFrontMatter);\n</script>`\n    : \"\";\n", "import extraJsPlugin from \"./plugin.ts\";\nexport default extraJsPlugin;\n\nexport * from \"./types.ts\";\nexport * from \"./create-tags.ts\";\n"],
  "mappings": "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",
  "names": ["markdownItFrontMatter", "grayMatter", "initMermaid", "init_mermaid_default", "initFontAsesome", "init_font_asesome_default", "initUnoCSS", "init_uno_css_default", "initAll", "extrajsOptions", "createTemplateTag", "frontMatter", "init_mermaid_default", "init_font_asesome_default", "init_uno_css_default", "createScriptTag", "defaultOptions", "extraJsPlugin", "md", "userOptions", "render", "parse", "frontMatter", "markdownItFrontMatter", "_fm", "markdown", "env", "grayMatter", "args", "options", "createTemplateTag", "createScriptTag", "plugin_default", "src_default", "plugin_default"]
}
