{
  "version": 3,
  "sources": ["../src/init-font-awesome.ts"],
  "sourcesContent": ["import type { ExtraJSFrontMatter, ExtraJSOptions } from \"./types.ts\";\nimport type {\n  IconDefinition,\n  IconPack,\n} from \"@fortawesome/fontawesome-svg-core\";\n\nconst extractIcons = (\n  iconSet: Record<string, IconPack | IconDefinition | string>,\n) => {\n  return Object.entries(iconSet)\n    .filter(([key, value]) =>\n      key !== \"prefix\" && key !== \"default\" && typeof value !== \"string\"\n    )\n    .map(([, value]) => value);\n};\n\nexport default async (\n  options: ExtraJSOptions = {},\n  _frontMatter: ExtraJSFrontMatter = {},\n  _conf: ExtraJSFrontMatter = {},\n) => {\n  try {\n    const [\n      { default: fontawesomeSvgCore },\n      { default: freeSolidSvgIcons },\n      { default: freeRegularSvgIcons },\n      { default: freeBrandsSvgIcons },\n    ] = await Promise.all([\n      import(options.fontAwesomeUrl + \"/fontawesome-svg-core\"),\n      import(options.fontAwesomeUrl + \"/free-solid-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-regular-svg-icons\"),\n      import(options.fontAwesomeUrl + \"/free-brands-svg-icons\"),\n    ]);\n\n    const icons = [\n      ...extractIcons(freeSolidSvgIcons),\n      ...extractIcons(freeRegularSvgIcons),\n      ...extractIcons(freeBrandsSvgIcons),\n    ];\n\n    fontawesomeSvgCore.config.autoAddCss = false;\n    fontawesomeSvgCore.library.add(...icons);\n    fontawesomeSvgCore.dom.i2svg();\n    fontawesomeSvgCore.dom.watch();\n\n    if (!document.getElementById(\"extrajs-fontawesome\")) {\n      const styleElement = document.createElement(\"style\");\n      styleElement.id = \"extrajs-fontawesome\";\n      styleElement.textContent = fontawesomeSvgCore.dom.css();\n      document.head.appendChild(styleElement);\n      const observer = new MutationObserver(() => {\n        if (styleElement && styleElement.textContent === \"\") {\n          styleElement.textContent = fontawesomeSvgCore.dom.css();\n        }\n      });\n      observer.observe(styleElement, {\n        characterData: true,\n        childList: true,\n        subtree: true,\n      });\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n"],
  "mappings": "AAMA,IAAMA,EACJC,GAEO,OAAO,QAAQA,CAAO,EAC1B,OAAO,CAAC,CAACC,EAAKC,CAAK,IAClBD,IAAQ,UAAYA,IAAQ,WAAa,OAAOC,GAAU,QAC5D,EACC,IAAI,CAAC,CAAC,CAAEA,CAAK,IAAMA,CAAK,EAGtBC,EAAQ,MACbC,EAA0B,CAAC,EAC3BC,EAAmC,CAAC,EACpCC,EAA4B,CAAC,IAC1B,CACH,GAAI,CACF,GAAM,CACJ,CAAE,QAASC,CAAmB,EAC9B,CAAE,QAASC,CAAkB,EAC7B,CAAE,QAASC,CAAoB,EAC/B,CAAE,QAASC,CAAmB,CAChC,EAAI,MAAM,QAAQ,IAAI,CACpB,OAAON,EAAQ,eAAiB,yBAChC,OAAOA,EAAQ,eAAiB,yBAChC,OAAOA,EAAQ,eAAiB,2BAChC,OAAOA,EAAQ,eAAiB,yBAClC,CAAC,EAEKO,EAAQ,CACZ,GAAGZ,EAAaS,CAAiB,EACjC,GAAGT,EAAaU,CAAmB,EACnC,GAAGV,EAAaW,CAAkB,CACpC,EAOA,GALAH,EAAmB,OAAO,WAAa,GACvCA,EAAmB,QAAQ,IAAI,GAAGI,CAAK,EACvCJ,EAAmB,IAAI,MAAM,EAC7BA,EAAmB,IAAI,MAAM,EAEzB,CAAC,SAAS,eAAe,qBAAqB,EAAG,CACnD,IAAMK,EAAe,SAAS,cAAc,OAAO,EACnDA,EAAa,GAAK,sBAClBA,EAAa,YAAcL,EAAmB,IAAI,IAAI,EACtD,SAAS,KAAK,YAAYK,CAAY,EACrB,IAAI,iBAAiB,IAAM,CACtCA,GAAgBA,EAAa,cAAgB,KAC/CA,EAAa,YAAcL,EAAmB,IAAI,IAAI,EAE1D,CAAC,EACQ,QAAQK,EAAc,CAC7B,cAAe,GACf,UAAW,GACX,QAAS,EACX,CAAC,CACH,CACF,OAASC,EAAO,CACd,MAAMA,CACR,CACF",
  "names": ["extractIcons", "iconSet", "key", "value", "init_font_awesome_default", "options", "_frontMatter", "_conf", "fontawesomeSvgCore", "freeSolidSvgIcons", "freeRegularSvgIcons", "freeBrandsSvgIcons", "icons", "styleElement", "error"]
}
